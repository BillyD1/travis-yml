#!/usr/bin/env ruby

require 'fileutils'
require 'yaml'

def database_yml?(config)
  keys = config.keys + config.values.map do |config|
    config.keys if config.respond_to?(:keys)
  end
  keys = keys.flatten.compact
  %w(adapter database).all? { |key| keys.include?(key) }
end

def coveralls_yml?(config)
  config['service_name'] == 'travis-pro'
end

def parse(yaml, file, ix)
  YAML.load(yaml)
rescue => e
  puts
  puts "unable to parse #{file}, chunk #{ix}"
  puts e.message
  puts yaml
end

def unindent(str)
  width = str.scan(/^[ \t]*(?=\S)/).min.size || 0
  str.gsub(/^[ \t]{#{width}}/, '')
end

source = '../docs-travis-ci-com/user'
target = 'spec/fixtures/docs'

FileUtils.rm_rf(target)

Dir["#{source}/**/*.md"].each do |file|
  content = File.read(file)
  path = file.sub(source, '').sub('.md', '')
  path = [target, path].join

  content.scan(/```yaml(.*?)```/m).each.with_index do |yaml, ix|
    yaml = yaml.first
    yaml = unindent(yaml).strip
    yaml = yaml.gsub(/^\s*(\.)+$/, '')
    yaml = yaml.gsub('[always|never|change]', 'always')

    config = parse(yaml, file, ix)
    next if config.nil?
    next if database_yml?(config)
    next if coveralls_yml?(config)

    ix = ix.+(1).to_s.rjust(3, '0')
    FileUtils.mkdir_p(path)
    File.write("#{path}/#{ix}.yml", yaml)
  end
end
